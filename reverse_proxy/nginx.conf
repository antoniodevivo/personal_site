user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log  /var/log/nginx/error.log warn;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 1024;
}

http {

	include /etc/nginx/mime.types;
	
	#Reverse Proxy
	server {
		
		listen 443 ssl http2 default_server;
		listen [::]:443 ssl http2 default_server;
		
		server_name example.com www.example.com;
		
		ssl_certificate /etc/ssl/private/example.com.crt;
		ssl_certificate_key /etc/ssl/private/example.com.key;
		
		
		########## SECURITY
		
		#for not show nginx version
		server_tokens off;
		
		ssl_protocols       TLSv1.2;
		ssl_prefer_server_ciphers   on;
		
		ssl_ciphers 'ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5';
		
		# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
		ssl_dhparam     /etc/ssl/private/example.com.dhparam.cert;
		
		# Cache parameters for the SSL session
		ssl_session_timeout 5m;
		ssl_session_cache shared:SSL:50m;
		
		# OCSP Stapling
		ssl_stapling on;
		ssl_stapling_verify on;
		ssl_trusted_certificate /etc/ssl/private/example.com.stapling.crt;
		resolver 8.8.8.8;
		
		#for avoid regonation in session
		ssl_session_tickets on;
		
		# Switch on Keep Alive
		keepalive_timeout   70;
		
		#Headers
		add_header X-Content-Type-Options nosniff;

		#Clickjacking attack protection
		add_header X-Frame-Options "SAMEORIGIN";
	
		#XSS protection
		add_header X-XSS-Protection "1; mode=block";
		
		
		##########
		
		location / {
			proxy_pass          http://personal_site:443;
			proxy_set_header 	Host $host;
			proxy_set_header    X-Forwarded-For $remote_addr;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			add_header X-Content-Type-Options nosniff;
			add_header Content-Security-Policy "default-src 'self'; script-src 'self' https://fonts.googleapis.com https://cdnjs.cloudflare.com https://use.fontawesome.com; img-src 'self' https://www.w3.org; style-src 'self' 'unsafe-inline'  https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; frame-src 'none'; object-src 'none'";
			add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload' always;
			add_header X-Permitted-Cross-Domain-Policies master-only;
			add_header Referrer-Policy same-origin;
			add_header X-Frame-Options "SAMEORIGIN";
			add_header X-XSS-Protection "1; mode=block";
		}

		location /blog {
			location ~ \.css {
				add_header  Content-Type    text/css;
				proxy_pass http://blog:443$request_uri;
				proxy_set_header Host $host;
				proxy_set_header X-Real-IP $remote_addr;
				proxy_set_header X-Forwarded-For $remote_addr;
				proxy_set_header X-Forwarded-Proto $scheme;
			}
			location ~ \.js {
				add_header  Content-Type    application/x-javascript;
				proxy_pass http://blog:443$request_uri;
				proxy_set_header Host $host;
				proxy_set_header X-Real-IP $remote_addr;
				proxy_set_header X-Forwarded-For $remote_addr;
				proxy_set_header X-Forwarded-Proto $scheme;
			}
			location ~ \.php$ {
				proxy_pass http://blog:443$request_uri;
				proxy_set_header Host $host;
				proxy_set_header X-Real-IP $remote_addr;
				proxy_set_header X-Forwarded-For $remote_addr;
				proxy_set_header X-Forwarded-Proto $scheme;
			}
			proxy_pass          http://blog:443;
			proxy_redirect  off;
			proxy_headers_hash_max_size 512;
			proxy_headers_hash_bucket_size 128; 
			proxy_set_header 	X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header 	X-Forwarded-Proto $scheme;
			proxy_set_header 	Host $host;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			add_header X-Content-Type-Options nosniff;
			#add_header Content-Security-Policy "default-src 'self'";
			#add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload' always;
			add_header X-Permitted-Cross-Domain-Policies master-only;
			add_header Referrer-Policy same-origin;
			add_header X-Frame-Options "SAMEORIGIN";
			add_header X-XSS-Protection "1; mode=block";
		}
		
	}

	server {
		listen 80;
		listen [::]:80;
		server_name example.com www.example.com;
		return 301 https://$host$request_uri;
	}
}
